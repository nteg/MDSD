/*
 * generated by Xtext 2.9.0
 */
package com.nagarro.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import com.google.inject.Inject
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.nagarro.myApp.DomainEntity
import com.nagarro.myApp.Fields
import com.nagarro.myApp.Component
import com.nagarro.myApp.Interface
import com.nagarro.myApp.Reference
import com.nagarro.myApp.Operations

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MyAppGenerator extends AbstractGenerator {

@Inject extension IQualifiedNameProvider
	
	StringBuffer argStr
	int commaIndex
	
	int svcIndex
	StringBuffer tempStr=new StringBuffer();
	
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	
		
	  for (e : resource.allContents.toIterable.filter(DomainEntity)) {
	            fsa.generateFile(
	                e.fullyQualifiedName.toString("/") + ".java",
	                e.compile)
	        }
	        
	         for (c : resource.allContents.toIterable.filter(Component)) {
	            fsa.generateFile(
	                "Component_"+c.fullyQualifiedName.toString("/") + ".java",
	                c.generateComponent)
	        }
	        
	         for (i : resource.allContents.toIterable.filter(Interface)) {
	            fsa.generateFile(i.fullyQualifiedName.toString("/") + ".java", i.generateSvcInterface)
	           // fsa.generateFile( i.fullyQualifiedName.toString("/") + "Impl.java", i.generateSvcInterfaceImpl(false,null))
	        }
	        
     
	        for (i : resource.allContents.toIterable.filter(Interface)) {
	        	svcIndex = i.fullyQualifiedName.toString("/").lastIndexOf("Service")
	        	tempStr = new StringBuffer(i.fullyQualifiedName.toString("/").substring(0,svcIndex));
	        	tempStr.append("Dao")
	            fsa.generateFile(tempStr + ".java",i.generateDaoInterface(tempStr))
	            fsa.generateFile(tempStr + "Impl.java",i.generateDaoImpl(tempStr))
	        }
	        
	        // Inject Dao in ServiceImpl
	        for (i : resource.allContents.toIterable.filter(Interface)) {
	        	svcIndex = i.fullyQualifiedName.toString("/").lastIndexOf("Service")
	        	tempStr = new StringBuffer();
	        	tempStr = new StringBuffer(i.fullyQualifiedName.toString("/").substring(0,svcIndex));
	        	tempStr.append("Dao")
	        	fsa.generateFile(i.fullyQualifiedName.toString("/") + "Impl.java", i.generateSvcInterfaceImpl(true, tempStr));
	        }
	        
	        
	}
	
	def injectDao() {
		
	}
	
	def generateSvcInterface(Interface i)'''
«argStr = new StringBuffer()»
//«commaIndex=0»
   «IF i.eContainer.fullyQualifiedName != null»
package «i.eContainer.fullyQualifiedName»;
        «ENDIF»
public interface «i.name» {
«FOR o : i.operations»
   	«processArguments(o,false)»
«ENDFOR»
}	
	'''

	def generateSvcInterfaceImpl(Interface i, boolean injectStatus, StringBuffer daoName)'''
«argStr = new StringBuffer()»
//«commaIndex=0»
   «IF i.eContainer.fullyQualifiedName != null»
package «i.eContainer.fullyQualifiedName»;
        «ENDIF»
public class «i.name»Impl implements «i.name» {
	
«IF injectStatus == true»
@AutoWired «daoName»;
«ENDIF»	
	
«FOR o : i.operations»
   	«processArguments(o,true)»
«ENDFOR»
}	
	'''	
	
	def generateDaoInterface(Interface i, StringBuffer daoName)'''
«argStr = new StringBuffer()»
//«commaIndex=0»
   «IF i.eContainer.fullyQualifiedName != null»
package «i.eContainer.fullyQualifiedName»;
        «ENDIF»
public interface «daoName» {
«FOR o : i.operations»
   	«processArguments(o,false)»
«ENDFOR»
}	
	'''
	
	def generateDaoImpl(Interface i, StringBuffer daoName)'''
«argStr = new StringBuffer()»
//«commaIndex=0»
   «IF i.eContainer.fullyQualifiedName != null»
package «i.eContainer.fullyQualifiedName»;
        «ENDIF»
public class «daoName»Impl implements «daoName»{
«FOR o : i.operations»
   	«processArguments(o,true)»
«ENDFOR»
}
	'''
	
	def generateComponent(Component comp) '''
	
	/**
	component name => «comp.name»
	component method => «comp.method»
	
	 «FOR compFields : comp.fields»
	     field name => «compFields.name»
	  «ENDFOR»
	
	useInterfaceInstanceName => «comp.useInterfaceInstanceName»
	provideInterfaceInstanceName => «comp.provideInterfaceInstanceName»
	**/
	
	'''
		
	def compile(DomainEntity e) ''' 

«argStr = new StringBuffer()»
//«commaIndex=0»
       «IF e.eContainer.fullyQualifiedName != null»
package «e.eContainer.fullyQualifiedName»;
        «ENDIF»
         «FOR ref : e.references»
     «ref.importRef»
         «ENDFOR»
public class «e.name» «IF e.superType != null
                »extends «e.superType.fullyQualifiedName» «ENDIF»{

            «FOR f : e.fields»
    «f.compile»
            «ENDFOR»

		   «FOR ref : e.references»
			   «IF ref.relationType.toString == "one2many"»
// List created for one2many reference			   
List<«ref.name.name»> certificateList = new ArrayList<«ref.name.name»>();
			   	«ENDIF»
			   	«IF ref.relationType.toString == "one2one"»
// Created for one2one reference			   
private «ref.name.name» «ref.name.name.toFirstLower»;
     		   	«ENDIF»
		   	«ENDFOR»

            «FOR o : e.operations»
           	«processArguments(o,true)»
             «ENDFOR»
}
    '''
    
	def processArguments(Operations o, boolean showBody)'''

«FOR argsElement : o.args»
//«argStr.append(argsElement.type).append(" ").append(argsElement.name)»
//«argStr.append(",")»
«ENDFOR»

«IF argStr.length != 0»
// «commaIndex=argStr.lastIndexOf(",")»
«argStr.setCharAt(commaIndex," ")»
«ENDIF»

/**
* @ReturnType: «o.returnType»
* @Author: Nagarro Inc
*/ 
public «o.returnType» «o.methodName»(«argStr»)«IF showBody ==  false»;«ENDIF»
«IF showBody ==  true»
       {
       «o.returnType» obj=«initializeType(o.returnType)»;
       // Update with business logic
       return obj;
        }
«ENDIF»

«argStr = new StringBuffer()»

	'''
	
	def initializeType(String type) {
		if (type == "int")
0
		else
"null";		
	}
	
	def importRef(Reference reference)'''
		«IF reference.relationType.toString == "one2many"»
import java.util.*;
		«ENDIF»

	'''
	
	
    
       def compile(Fields f) '''
        
        private «f.type.fullyQualifiedName» «f.name»;
        
        public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
            return «f.name»;
        }
        
        public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
            this.«f.name» = «f.name»;
        }
    '''
}
